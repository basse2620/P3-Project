import { __rest } from "tslib";
// @END_IMPORTS@
import { Component, ContentChildren, Input } from "@angular/core";
import * as i0 from "@angular/core";
export class AgGridColumn {
    hasChildColumns() {
        if (this.childColumns && this.childColumns.length > 0) {
            // necessary because of https://github.com/angular/angular/issues/10098
            return !(this.childColumns.length === 1 && this.childColumns.first === this);
        }
        return false;
    }
    toColDef() {
        let colDef = this.createColDefFromGridColumn(this);
        if (this.hasChildColumns()) {
            colDef["children"] = this.getChildColDefs(this.childColumns);
        }
        return colDef;
    }
    getChildColDefs(childColumns) {
        return childColumns
            // necessary because of https://github.com/angular/angular/issues/10098
            .filter(column => !column.hasChildColumns())
            .map((column) => {
            return column.toColDef();
        });
    }
    createColDefFromGridColumn(from) {
        let { childColumns } = from, colDef = __rest(from, ["childColumns"]);
        return colDef;
    }
}
AgGridColumn.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AgGridColumn, deps: [], target: i0.ɵɵFactoryTarget.Component });
AgGridColumn.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AgGridColumn, selector: "ag-grid-column", inputs: { filterFramework: "filterFramework", filterParams: "filterParams", floatingFilterComponent: "floatingFilterComponent", floatingFilterComponentParams: "floatingFilterComponentParams", floatingFilterComponentFramework: "floatingFilterComponentFramework", filter: "filter", headerName: "headerName", headerValueGetter: "headerValueGetter", headerTooltip: "headerTooltip", headerClass: "headerClass", suppressHeaderKeyboardEvent: "suppressHeaderKeyboardEvent", columnGroupShow: "columnGroupShow", toolPanelClass: "toolPanelClass", suppressColumnsToolPanel: "suppressColumnsToolPanel", suppressFiltersToolPanel: "suppressFiltersToolPanel", tooltipComponent: "tooltipComponent", tooltipComponentFramework: "tooltipComponentFramework", tooltipComponentParams: "tooltipComponentParams", children: "children", groupId: "groupId", openByDefault: "openByDefault", marryChildren: "marryChildren", headerGroupComponent: "headerGroupComponent", headerGroupComponentFramework: "headerGroupComponentFramework", headerGroupComponentParams: "headerGroupComponentParams", colId: "colId", field: "field", type: "type", valueGetter: "valueGetter", valueFormatter: "valueFormatter", refData: "refData", keyCreator: "keyCreator", equals: "equals", tooltipField: "tooltipField", tooltipValueGetter: "tooltipValueGetter", checkboxSelection: "checkboxSelection", showDisabledCheckboxes: "showDisabledCheckboxes", icons: "icons", suppressNavigable: "suppressNavigable", suppressKeyboardEvent: "suppressKeyboardEvent", suppressPaste: "suppressPaste", suppressFillHandle: "suppressFillHandle", hide: "hide", initialHide: "initialHide", lockVisible: "lockVisible", lockPosition: "lockPosition", suppressMovable: "suppressMovable", editable: "editable", valueSetter: "valueSetter", valueParser: "valueParser", cellEditor: "cellEditor", cellEditorFramework: "cellEditorFramework", cellEditorParams: "cellEditorParams", cellEditorSelector: "cellEditorSelector", singleClickEdit: "singleClickEdit", newValueHandler: "newValueHandler", cellEditorPopup: "cellEditorPopup", cellEditorPopupPosition: "cellEditorPopupPosition", onCellValueChanged: "onCellValueChanged", onCellClicked: "onCellClicked", onCellDoubleClicked: "onCellDoubleClicked", onCellContextMenu: "onCellContextMenu", getQuickFilterText: "getQuickFilterText", filterValueGetter: "filterValueGetter", floatingFilter: "floatingFilter", wrapHeaderText: "wrapHeaderText", autoHeaderHeight: "autoHeaderHeight", headerComponent: "headerComponent", headerComponentFramework: "headerComponentFramework", headerComponentParams: "headerComponentParams", menuTabs: "menuTabs", columnsMenuParams: "columnsMenuParams", suppressMenu: "suppressMenu", headerCheckboxSelection: "headerCheckboxSelection", headerCheckboxSelectionFilteredOnly: "headerCheckboxSelectionFilteredOnly", chartDataType: "chartDataType", pinned: "pinned", initialPinned: "initialPinned", lockPinned: "lockPinned", pinnedRowCellRenderer: "pinnedRowCellRenderer", pinnedRowCellRendererFramework: "pinnedRowCellRendererFramework", pinnedRowCellRendererParams: "pinnedRowCellRendererParams", pinnedRowValueFormatter: "pinnedRowValueFormatter", pivot: "pivot", initialPivot: "initialPivot", pivotIndex: "pivotIndex", initialPivotIndex: "initialPivotIndex", pivotComparator: "pivotComparator", enablePivot: "enablePivot", cellStyle: "cellStyle", cellClass: "cellClass", cellClassRules: "cellClassRules", cellRenderer: "cellRenderer", cellRendererFramework: "cellRendererFramework", cellRendererParams: "cellRendererParams", cellRendererSelector: "cellRendererSelector", autoHeight: "autoHeight", wrapText: "wrapText", enableCellChangeFlash: "enableCellChangeFlash", suppressCellFlash: "suppressCellFlash", rowDrag: "rowDrag", rowDragText: "rowDragText", dndSource: "dndSource", dndSourceOnRowDrag: "dndSourceOnRowDrag", rowGroup: "rowGroup", initialRowGroup: "initialRowGroup", rowGroupIndex: "rowGroupIndex", initialRowGroupIndex: "initialRowGroupIndex", enableRowGroup: "enableRowGroup", enableValue: "enableValue", aggFunc: "aggFunc", initialAggFunc: "initialAggFunc", defaultAggFunc: "defaultAggFunc", allowedAggFuncs: "allowedAggFuncs", showRowGroup: "showRowGroup", sortable: "sortable", sort: "sort", initialSort: "initialSort", sortIndex: "sortIndex", initialSortIndex: "initialSortIndex", sortingOrder: "sortingOrder", comparator: "comparator", unSortIcon: "unSortIcon", sortedAt: "sortedAt", colSpan: "colSpan", rowSpan: "rowSpan", width: "width", initialWidth: "initialWidth", minWidth: "minWidth", maxWidth: "maxWidth", flex: "flex", initialFlex: "initialFlex", resizable: "resizable", suppressSizeToFit: "suppressSizeToFit", suppressAutoSize: "suppressAutoSize" }, queries: [{ propertyName: "childColumns", predicate: AgGridColumn }], ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AgGridColumn, decorators: [{
            type: Component,
            args: [{
                    selector: 'ag-grid-column',
                    template: ''
                }]
        }], propDecorators: { childColumns: [{
                type: ContentChildren,
                args: [AgGridColumn]
            }], filterFramework: [{
                type: Input
            }], filterParams: [{
                type: Input
            }], floatingFilterComponent: [{
                type: Input
            }], floatingFilterComponentParams: [{
                type: Input
            }], floatingFilterComponentFramework: [{
                type: Input
            }], filter: [{
                type: Input
            }], headerName: [{
                type: Input
            }], headerValueGetter: [{
                type: Input
            }], headerTooltip: [{
                type: Input
            }], headerClass: [{
                type: Input
            }], suppressHeaderKeyboardEvent: [{
                type: Input
            }], columnGroupShow: [{
                type: Input
            }], toolPanelClass: [{
                type: Input
            }], suppressColumnsToolPanel: [{
                type: Input
            }], suppressFiltersToolPanel: [{
                type: Input
            }], tooltipComponent: [{
                type: Input
            }], tooltipComponentFramework: [{
                type: Input
            }], tooltipComponentParams: [{
                type: Input
            }], children: [{
                type: Input
            }], groupId: [{
                type: Input
            }], openByDefault: [{
                type: Input
            }], marryChildren: [{
                type: Input
            }], headerGroupComponent: [{
                type: Input
            }], headerGroupComponentFramework: [{
                type: Input
            }], headerGroupComponentParams: [{
                type: Input
            }], colId: [{
                type: Input
            }], field: [{
                type: Input
            }], type: [{
                type: Input
            }], valueGetter: [{
                type: Input
            }], valueFormatter: [{
                type: Input
            }], refData: [{
                type: Input
            }], keyCreator: [{
                type: Input
            }], equals: [{
                type: Input
            }], tooltipField: [{
                type: Input
            }], tooltipValueGetter: [{
                type: Input
            }], checkboxSelection: [{
                type: Input
            }], showDisabledCheckboxes: [{
                type: Input
            }], icons: [{
                type: Input
            }], suppressNavigable: [{
                type: Input
            }], suppressKeyboardEvent: [{
                type: Input
            }], suppressPaste: [{
                type: Input
            }], suppressFillHandle: [{
                type: Input
            }], hide: [{
                type: Input
            }], initialHide: [{
                type: Input
            }], lockVisible: [{
                type: Input
            }], lockPosition: [{
                type: Input
            }], suppressMovable: [{
                type: Input
            }], editable: [{
                type: Input
            }], valueSetter: [{
                type: Input
            }], valueParser: [{
                type: Input
            }], cellEditor: [{
                type: Input
            }], cellEditorFramework: [{
                type: Input
            }], cellEditorParams: [{
                type: Input
            }], cellEditorSelector: [{
                type: Input
            }], singleClickEdit: [{
                type: Input
            }], newValueHandler: [{
                type: Input
            }], cellEditorPopup: [{
                type: Input
            }], cellEditorPopupPosition: [{
                type: Input
            }], onCellValueChanged: [{
                type: Input
            }], onCellClicked: [{
                type: Input
            }], onCellDoubleClicked: [{
                type: Input
            }], onCellContextMenu: [{
                type: Input
            }], getQuickFilterText: [{
                type: Input
            }], filterValueGetter: [{
                type: Input
            }], floatingFilter: [{
                type: Input
            }], wrapHeaderText: [{
                type: Input
            }], autoHeaderHeight: [{
                type: Input
            }], headerComponent: [{
                type: Input
            }], headerComponentFramework: [{
                type: Input
            }], headerComponentParams: [{
                type: Input
            }], menuTabs: [{
                type: Input
            }], columnsMenuParams: [{
                type: Input
            }], suppressMenu: [{
                type: Input
            }], headerCheckboxSelection: [{
                type: Input
            }], headerCheckboxSelectionFilteredOnly: [{
                type: Input
            }], chartDataType: [{
                type: Input
            }], pinned: [{
                type: Input
            }], initialPinned: [{
                type: Input
            }], lockPinned: [{
                type: Input
            }], pinnedRowCellRenderer: [{
                type: Input
            }], pinnedRowCellRendererFramework: [{
                type: Input
            }], pinnedRowCellRendererParams: [{
                type: Input
            }], pinnedRowValueFormatter: [{
                type: Input
            }], pivot: [{
                type: Input
            }], initialPivot: [{
                type: Input
            }], pivotIndex: [{
                type: Input
            }], initialPivotIndex: [{
                type: Input
            }], pivotComparator: [{
                type: Input
            }], enablePivot: [{
                type: Input
            }], cellStyle: [{
                type: Input
            }], cellClass: [{
                type: Input
            }], cellClassRules: [{
                type: Input
            }], cellRenderer: [{
                type: Input
            }], cellRendererFramework: [{
                type: Input
            }], cellRendererParams: [{
                type: Input
            }], cellRendererSelector: [{
                type: Input
            }], autoHeight: [{
                type: Input
            }], wrapText: [{
                type: Input
            }], enableCellChangeFlash: [{
                type: Input
            }], suppressCellFlash: [{
                type: Input
            }], rowDrag: [{
                type: Input
            }], rowDragText: [{
                type: Input
            }], dndSource: [{
                type: Input
            }], dndSourceOnRowDrag: [{
                type: Input
            }], rowGroup: [{
                type: Input
            }], initialRowGroup: [{
                type: Input
            }], rowGroupIndex: [{
                type: Input
            }], initialRowGroupIndex: [{
                type: Input
            }], enableRowGroup: [{
                type: Input
            }], enableValue: [{
                type: Input
            }], aggFunc: [{
                type: Input
            }], initialAggFunc: [{
                type: Input
            }], defaultAggFunc: [{
                type: Input
            }], allowedAggFuncs: [{
                type: Input
            }], showRowGroup: [{
                type: Input
            }], sortable: [{
                type: Input
            }], sort: [{
                type: Input
            }], initialSort: [{
                type: Input
            }], sortIndex: [{
                type: Input
            }], initialSortIndex: [{
                type: Input
            }], sortingOrder: [{
                type: Input
            }], comparator: [{
                type: Input
            }], unSortIcon: [{
                type: Input
            }], sortedAt: [{
                type: Input
            }], colSpan: [{
                type: Input
            }], rowSpan: [{
                type: Input
            }], width: [{
                type: Input
            }], initialWidth: [{
                type: Input
            }], minWidth: [{
                type: Input
            }], maxWidth: [{
                type: Input
            }], flex: [{
                type: Input
            }], initialFlex: [{
                type: Input
            }], resizable: [{
                type: Input
            }], suppressSizeToFit: [{
                type: Input
            }], suppressAutoSize: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,